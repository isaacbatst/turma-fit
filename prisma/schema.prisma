generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataproxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  name                   String?
  id                     Int                @id @default(autoincrement())
  email                  String             @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  personal               Personal?
  student                Student?
  sentAdviceRequests     AdviceRequest[]    @relation("SentAdviceRequests")
  receivedAdviceRequests AdviceRequest[]    @relation("ReceivedAdviceRequests")
  trainingPlannings      TrainingPlanning[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Personal {
  id     Int      @id @default(autoincrement())
  user   User     @relation(fields: [userId], references: [id])
  userId Int      @unique
  advices Advice[]
}

model Student {
  id       Int           @id @default(autoincrement())
  age      Int?
  measures Measurement[]
  pictures Picture[]
  user     User          @relation(fields: [userId], references: [id])
  userId   Int           @unique
  advices   Advice[]
}

model Advice {
  active            Boolean
  student           Student            @relation(fields: [studentId], references: [id])
  personal          Personal           @relation(fields: [personalId], references: [id])
  studentId         Int
  personalId        Int
  trainingPlannings TrainingPlanning[]

  AdviceChange AdviceChange[]
  @@id([studentId, personalId])
}

model AdviceChange {
  id               Int      @id @default(autoincrement())
  activeChangedTo  Boolean
  advice           Advice   @relation(fields: [adviceStudentId, advicePersonalId], references: [studentId, personalId])
  date             DateTime @default(now())
  adviceStudentId  Int
  advicePersonalId Int
}

enum AdviceRequestStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum AdviceRequestOrigin {
  STUDENT
  PERSONAL
}

model AdviceRequest {
  id         Int                 @id @default(autoincrement())
  createdAt  DateTime            @default(now())
  origin     AdviceRequestOrigin
  status     AdviceRequestStatus
  to         User                @relation(name: "ReceivedAdviceRequests", fields: [toUserId], references: [id])
  from       User                @relation(name: "SentAdviceRequests", fields: [fromUserId], references: [id])
  fromUserId Int
  toUserId   Int
}

model Picture {
  url        String
  id         Int     @id @default(autoincrement())
  student_id Int
  student    Student @relation(fields: [student_id], references: [id])
}

model Measurement {
  createdAt     DateTime @default(now())
  id            Int      @id @default(autoincrement())
  weight        Float
  shoulders     Float
  chest         Float
  waist         Float
  hips          Float
  arm_left      Float
  arm_right     Float
  forearm_left  Float
  forearm_right Float
  thigh_left    Float
  thigh_right   Float
  calf_left     Float
  calf_right    Float
  student_id    Int
  student       Student  @relation(fields: [student_id], references: [id])
}

model MuscleGroup {
  name     String     @unique
  id       Int        @id @default(autoincrement())
  Movement Movement[]
}

model Movement {
  name               String
  id                 Int         @id @default(autoincrement())
  focusedMuscleGroup MuscleGroup @relation(fields: [muscleGroupId], references: [id])
  muscleGroupId      Int
  Exercise           Exercise[]
}

model Equipment {
  name     String
  id       Int        @id @default(autoincrement())
  Exercise Exercise[]
}

enum Grip {
  PRONATE
  SUPINE
  NEUTRAL
}

model Exercise {
  id          Int        @id @default(autoincrement())
  movement    Movement   @relation(fields: [movementId], references: [id])
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  grip        Grip?
  sets        Set[]
  movementId  Int
  equipmentId Int
}

model Set {
  exercises           Exercise[]
  id                  Int                @id @default(autoincrement())
  times               Int
  repetitions         String
  technique           ExerciseTechnique? @relation(fields: [exerciseTechniqueId], references: [id])
  exerciseTechniqueId Int?
  minRestTime         Int?
  maxRestTime         Int?
  trainings           Training[]
}

model ExerciseTechnique {
  name        String
  id          Int    @id @default(autoincrement())
  explanation String
  sets        Set[]
}

model TrainingPlanning {
  trainings              Training[]
  id                     Int                  @id @default(autoincrement())
  type                   TrainingPlanningType @relation(fields: [trainingPlanningTypeId], references: [id])
  trainingPlanningTypeId Int
  Advice                 Advice?              @relation(fields: [adviceStudentId, advicePersonalId], references: [studentId, personalId])
  adviceStudentId        Int?
  advicePersonalId       Int?
  User                   User?                @relation(fields: [userId], references: [id])
  userId                 Int?
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Training {
  id                 Int               @id @default(autoincrement())
  letter             String
  sets               Set[]
  aerobicMinutes     Int
  trainingPlanning   TrainingPlanning? @relation(fields: [trainingPlanningId], references: [id])
  trainingPlanningId Int?
  day                Day
}

model TrainingPlanningType {
  name               String
  id                 Int                @id @default(autoincrement())
  explanation        String
  defaultMinRestTime Int
  defaultMaxRestTime Int
  TrainingPlanning   TrainingPlanning[]
}
