generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataproxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name            String
  id              String        @id
  email           String        @unique
  emailVerifiedAt DateTime?
  image           String?
  birthdate       DateTime
  password        String
  workoutPlans    WorkoutPlan[]
  profile         Profile[]
  session         Session[]
}

model Session {
  id     String @id
  token  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum ProfileType {
  STUDENT
  PERSONAL
}

model Profile {
  id     String      @id
  type   ProfileType
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  // sentAdviceRequests     AdviceRequest[] @relation("SentAdviceRequests")
  // receivedAdviceRequests AdviceRequest[] @relation("ReceivedAdviceRequests")
}

model StudentProfile {
  id              String        @id
  studentMeasures Measurement[]
  studentPictures Picture[]
  // advices         Advice[]
}

model PersonalProfile {
  id String @id
  // advices Advice[]
}

// model Advice {
//   active       Boolean
//   student      StudentProfile  @relation(fields: [studentId], references: [id])
//   personal     PersonalProfile @relation(fields: [personalId], references: [id])
//   studentId    String
//   personalId   String
//   adviceChange AdviceChange[]
//   workoutPlans WorkoutPlan[]

//   @@id([studentId, personalId])
// }

// model AdviceChange {
//   id               String   @id @default(uuid())
//   activeChangedTo  Boolean
//   advice           Advice   @relation(fields: [adviceStudentId, advicePersonalId], references: [studentId, personalId])
//   date             DateTime @default(now())
//   adviceStudentId  String
//   advicePersonalId String
// }

// enum AdviceRequestStatus {
//   ACCEPTED
//   REJECTED
//   PENDING
// }

// model AdviceRequest {
//   id        String              @id @default(uuid())
//   createdAt DateTime            @default(now())
//   status    AdviceRequestStatus
//   to        Profile             @relation(name: "ReceivedAdviceRequests", fields: [toId], references: [id])
//   toId      String
//   from      Profile             @relation(name: "SentAdviceRequests", fields: [fromId], references: [id])
//   fromId    String
// }

model Picture {
  url              String
  id               String         @id
  studentProfile   StudentProfile @relation(fields: [studentProfileId], references: [id])
  studentProfileId String
}

model Measurement {
  createdAt        DateTime       @default(now())
  id               String         @id
  weight           Float
  shoulders        Float
  chest            Float
  waist            Float
  hips             Float
  arm_left         Float
  arm_right        Float
  forearm_left     Float
  forearm_right    Float
  thigh_left       Float
  thigh_right      Float
  calf_left        Float
  calf_right       Float
  studentProfile   StudentProfile @relation(fields: [studentProfileId], references: [id])
  studentProfileId String
}

enum MuscleGroup {
  BICEPS
  TRICEPS
  CHEST
  BACK
  ABDOMINALS
  SHOULDERS
  CALVES
  FOREARMS
  TRAPEZIUS
  GLUTES
  HAMSTRINGS
  LOWER_BACK
  QUADRICEPS
}

model Movement {
  name               String
  id                 String      @id @default(uuid())
  focusedMuscleGroup MuscleGroup
  exercise           Exercise[]
}

model Equipment {
  name     String
  id       String     @id @default(uuid())
  Exercise Exercise[]
}

enum Grip {
  PRONATE
  SUPINE
  NEUTRAL
}

model Exercise {
  id          String     @id @default(uuid())
  movement    Movement   @relation(fields: [movementId], references: [id])
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  grip        Grip?
  sets        Set[]
  movementId  String
  equipmentId String?
}

model Set {
  exercises   Exercise[]
  id          String             @id @default(uuid())
  times       Int
  repetitions String
  technique   ExerciseTechnique? @relation(fields: [techniqueId], references: [id])
  techniqueId String?
  minRestTime Int?
  maxRestTime Int?
  workouts    Workout[]
}

model ExerciseTechnique {
  name        String
  id          String @id @default(uuid())
  explanation String
  sets        Set[]
}

model WorkoutPlan {
  id                String          @id @default(uuid())
  workouts          Workout[]
  type              WorkoutPlanType @relation(fields: [workoutPlanTypeId], references: [id])
  workoutPlanTypeId String
  user              User?           @relation(fields: [userId], references: [id])
  userId            String?
  // advice            Advice          @relation(fields: [adviceStudentId, advicePersonalId], references: [studentId, personalId])
  // adviceStudentId   String
  // advicePersonalId  String
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Workout {
  id             String       @id @default(uuid())
  sets           Set[]
  aerobicMinutes Int
  workoutPlan    WorkoutPlan? @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId  String?
  day            Day
}

model WorkoutPlanType {
  name               String
  id                 String        @id @default(uuid())
  explanation        String
  defaultMinRestTime Int
  defaultMaxRestTime Int
  workoutPlan        WorkoutPlan[]
}
