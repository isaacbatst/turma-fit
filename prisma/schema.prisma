generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataproxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name              String
  id                String             @id
  email             String             @unique
  emailVerifiedAt   DateTime?
  image             String
  age               Int
  trainingPlannings TrainingPlanning[]
  Profile           Profile[]
}

enum ProfileType {
  STUDENT
  PERSONAL
}

model Profile {
  id                     String          @id
  type                   ProfileType
  user                   User            @relation(fields: [userId], references: [id])
  userId                 String
  sentAdviceRequests     AdviceRequest[] @relation("SentAdviceRequests")
  receivedAdviceRequests AdviceRequest[] @relation("ReceivedAdviceRequests")
}

model StudentProfile {
  id              String        @id
  studentMeasures Measurement[]
  studentPictures Picture[]
  advices         Advice[]
}

model PersonalProfile {
  id      String   @id
  advices Advice[]
}

model Advice {
  active            Boolean
  student           StudentProfile     @relation(fields: [studentId], references: [id])
  personal          PersonalProfile    @relation(fields: [personalId], references: [id])
  studentId         String
  personalId        String
  adviceChange      AdviceChange[]
  trainingPlannings TrainingPlanning[]

  @@id([studentId, personalId])
}

model AdviceChange {
  id               String   @id @default(uuid())
  activeChangedTo  Boolean
  advice           Advice   @relation(fields: [adviceStudentId, advicePersonalId], references: [studentId, personalId])
  date             DateTime @default(now())
  adviceStudentId  String
  advicePersonalId String
}

enum AdviceRequestStatus {
  ACCEPTED
  REJECTED
  PENDING
}

model AdviceRequest {
  id        String              @id @default(uuid())
  createdAt DateTime            @default(now())
  status    AdviceRequestStatus
  to        Profile             @relation(name: "ReceivedAdviceRequests", fields: [toId], references: [id])
  toId      String
  from      Profile             @relation(name: "SentAdviceRequests", fields: [fromId], references: [id])
  fromId    String
}

model Picture {
  url              String
  id               String         @id @default(uuid())
  profileId        String
  studentProfile   StudentProfile @relation(fields: [studentProfileId], references: [id])
  studentProfileId String
}

model Measurement {
  createdAt        DateTime       @default(now())
  id               String         @id @default(uuid())
  weight           Float
  shoulders        Float
  chest            Float
  waist            Float
  hips             Float
  arm_left         Float
  arm_right        Float
  forearm_left     Float
  forearm_right    Float
  thigh_left       Float
  thigh_right      Float
  calf_left        Float
  calf_right       Float
  profileId        String
  studentProfile   StudentProfile @relation(fields: [studentProfileId], references: [id])
  studentProfileId String
}

model MuscleGroup {
  name     String     @unique
  id       String     @id @default(uuid())
  Movement Movement[]
}

model Movement {
  name               String
  id                 String      @id @default(uuid())
  focusedMuscleGroup MuscleGroup @relation(fields: [muscleGroupId], references: [id])
  muscleGroupId      String
  exercise           Exercise[]
}

model Equipment {
  name     String
  id       String     @id @default(uuid())
  Exercise Exercise[]
}

enum Grip {
  PRONATE
  SUPINE
  NEUTRAL
}

model Exercise {
  id          String     @id @default(uuid())
  movement    Movement   @relation(fields: [movementId], references: [id])
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  grip        Grip?
  sets        Set[]
  movementId  String
  equipmentId String?
}

model Set {
  exercises           Exercise[]
  id                  String             @id @default(uuid())
  times               Int
  repetitions         String
  technique           ExerciseTechnique? @relation(fields: [exerciseTechniqueId], references: [id])
  exerciseTechniqueId String?
  minRestTime         Int?
  maxRestTime         Int?
  trainings           Training[]
}

model ExerciseTechnique {
  name        String
  id          String @id @default(uuid())
  explanation String
  sets        Set[]
}

enum TrainingPlanningType {
  ADVICE
  USER
}

model TrainingPlanning {
  id                     String                @id @default(uuid())
  trainings              Training[]
  type                   TrainingPlanningType
  focus                  TrainingPlanningFocus @relation(fields: [trainingPlanningTypeId], references: [id])
  trainingPlanningTypeId String
  user                   User?                 @relation(fields: [userId], references: [id])
  userId                 String?
  advice                 Advice                @relation(fields: [adviceStudentId, advicePersonalId], references: [studentId, personalId])
  adviceStudentId        String
  advicePersonalId       String
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Training {
  id                 String            @id @default(uuid())
  letter             String
  sets               Set[]
  aerobicMinutes     Int
  trainingPlanning   TrainingPlanning? @relation(fields: [trainingPlanningId], references: [id])
  trainingPlanningId String?
  day                Day
}

model TrainingPlanningFocus {
  name               String
  id                 String             @id @default(uuid())
  explanation        String
  defaultMinRestTime Int
  defaultMaxRestTime Int
  TrainingPlanning   TrainingPlanning[]
}
