generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataproxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String     @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String      @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  name                   String?
  id                     String                    @id @default(uuid())
  email                  String                 @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  personal               Personal?
  student                Student?
  sentAdviceRequests     AdviceRequest[]        @relation("SentAdviceRequests")
  receivedAdviceRequests AdviceRequest[]        @relation("ReceivedAdviceRequests")
  userTrainingPlannings  UserTrainingPlanning[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Personal {
  id      String      @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String      @unique
  advices Advice[]
}

model Student {
  id       String           @id @default(uuid())
  age      Int?
  measures Measurement[]
  pictures Picture[]
  user     User          @relation(fields: [userId], references: [id])
  userId   String           @unique
  advices  Advice[]
}

model Advice {
  active                  Boolean
  student                 Student                  @relation(fields: [studentId], references: [id])
  personal                Personal                 @relation(fields: [personalId], references: [id])
  studentId               String
  personalId              String
  adviceChange            AdviceChange[]
  adviceTrainingPlannings AdviceTrainingPlanning[]

  @@id([studentId, personalId])
}

model AdviceChange {
  id               String      @id @default(uuid())
  activeChangedTo  Boolean
  advice           Advice   @relation(fields: [adviceStudentId, advicePersonalId], references: [studentId, personalId])
  date             DateTime @default(now())
  adviceStudentId  String
  advicePersonalId String
}

enum AdviceRequestStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum AdviceRequestOrigin {
  STUDENT
  PERSONAL
}

model AdviceRequest {
  id         String                 @id @default(uuid())
  createdAt  DateTime            @default(now())
  origin     AdviceRequestOrigin
  status     AdviceRequestStatus
  to         User                @relation(name: "ReceivedAdviceRequests", fields: [toUserId], references: [id])
  from       User                @relation(name: "SentAdviceRequests", fields: [fromUserId], references: [id])
  fromUserId String
  toUserId   String
}

model Picture {
  url        String
  id         String     @id @default(uuid())
  student_id String
  student    Student @relation(fields: [student_id], references: [id])
}

model Measurement {
  createdAt     DateTime @default(now())
  id            String      @id @default(uuid())
  weight        Float
  shoulders     Float
  chest         Float
  waist         Float
  hips          Float
  arm_left      Float
  arm_right     Float
  forearm_left  Float
  forearm_right Float
  thigh_left    Float
  thigh_right   Float
  calf_left     Float
  calf_right    Float
  student_id    String
  student       Student  @relation(fields: [student_id], references: [id])
}

model MuscleGroup {
  name     String     @unique
  id       String        @id @default(uuid())
  Movement Movement[]
}

model Movement {
  name               String
  id                 String         @id @default(uuid())
  focusedMuscleGroup MuscleGroup @relation(fields: [muscleGroupId], references: [id])
  muscleGroupId      String
  exercise           Exercise[]
}

model Equipment {
  name     String
  id       String        @id @default(uuid())
  Exercise Exercise[]
}

enum Grip {
  PRONATE
  SUPINE
  NEUTRAL
}

model Exercise {
  id          String        @id @default(uuid())
  movement    Movement   @relation(fields: [movementId], references: [id])
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  grip        Grip?
  sets        Set[]
  movementId  String
  equipmentId String?
}

model Set {
  exercises           Exercise[]
  id                  String                @id @default(uuid())
  times               Int
  repetitions         String
  technique           ExerciseTechnique? @relation(fields: [exerciseTechniqueId], references: [id])
  exerciseTechniqueId String?
  minRestTime         Int?
  maxRestTime         Int?
  trainings           Training[]
}

model ExerciseTechnique {
  name        String
  id          String    @id @default(uuid())
  explanation String
  sets        Set[]
}

model UserTrainingPlanning {
  trainingPlanning   TrainingPlanning @relation(fields: [trainingPlanningId], references: [id])
  trainingPlanningId String              @id

  user   User? @relation(fields: [userId], references: [id])
  userId String?
}

model AdviceTrainingPlanning {
  trainingPlanning   TrainingPlanning @relation(fields: [trainingPlanningId], references: [id])
  trainingPlanningId String              @id
  advice             Advice           @relation(fields: [adviceStudentId, advicePersonalId], references: [studentId, personalId])
  adviceStudentId    String
  advicePersonalId   String
}

model TrainingPlanning {
  trainings              Training[]
  id                     String                     @id @default(uuid())
  type                   TrainingPlanningType    @relation(fields: [trainingPlanningTypeId], references: [id])
  trainingPlanningTypeId String
  userTrainingPlanning   UserTrainingPlanning?
  adviceTrainingPlanning AdviceTrainingPlanning?
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Training {
  id                 String               @id @default(uuid())
  letter             String
  sets               Set[]
  aerobicMinutes     Int
  trainingPlanning   TrainingPlanning? @relation(fields: [trainingPlanningId], references: [id])
  trainingPlanningId String?
  day                Day
}

model TrainingPlanningType {
  name               String
  id                 String                @id @default(uuid())
  explanation        String
  defaultMinRestTime Int
  defaultMaxRestTime Int
  TrainingPlanning   TrainingPlanning[]
}
